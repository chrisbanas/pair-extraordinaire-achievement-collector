name: Automate Pair Extraordinaire Badge

on:
  workflow_dispatch:

permissions:
  contents: write      # for checkout, committing, and pushing
  pull-requests: write # for creating & merging PRs

jobs:
  unlock-badge:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the main branch with full history
      - name: Checkout main
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main

      # 2️⃣ Install and authenticate GitHub CLI with your PAT
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Authenticate GH CLI
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          unset GH_TOKEN
          echo "$TOKEN" | gh auth login --with-token

      # 3️⃣ Ensure .envexample exists on main (create it if missing)
      - name: Ensure .envexample
        run: |
          git fetch --prune origin main
          git checkout --force origin/main
          if [ ! -f .envexample ]; then
            touch .envexample
            git add .envexample
            git commit -m "chore: add .envexample placeholder"
            git push origin HEAD:main
          fi

      # 4️⃣ Loop 1→48: create an ephemeral branch off origin/main, commit as DongwanXu, co-author by chrisbanas, PR → squash-merge → delete
      - name: Create & merge 48 co-authored PRs
        env:
          COAUTHOR_NAME: "DongwanXu"
          COAUTHOR_EMAIL: "dongwanxu23@gmail.com"
          PRIMARY_NAME: "chrisbanas"
          PRIMARY_EMAIL: "bananas595@gmail.com"
        run: |
          for i in $(seq 1 48); do
            # 4a) Get a pristine copy of origin/main
            git fetch --prune origin main
            git checkout --detach origin/main

            # 4b) Create an ephemeral local branch
            EPHEMERAL="ephemeral-badge-$i"
            git checkout -b "$EPHEMERAL"

            # 4c) Bump .envexample
            echo "BADGE_RUN_$i=$(date +%s)" >> .envexample
            git add .envexample

            # 4d) Commit, setting the author to the SECONDARY account, and adding a Co-authored-by trailer for the primary account
            git commit \
              --author="${COAUTHOR_NAME} <${COAUTHOR_EMAIL}>" \
              -m "chore: badge change #$i" \
              -m "Co-authored-by: ${PRIMARY_NAME} <${PRIMARY_EMAIL}>"

            # 4e) Force-push to badge-run-$i (wiping out any older remote branch)
            REMOTE_BRANCH="badge-run-$i"
            git push --force origin HEAD:"$REMOTE_BRANCH"

            # 4f) Grab the full commit message (author + trailer)
            PR_BODY=$(git log -1 --pretty=%B)
            PR_TITLE=$(echo "$PR_BODY" | head -n1)

            # 4g) Detect if a PR is already open from badge-run-$i → main
            EXISTING_PR=$(gh pr list \
                             --state open \
                             --head "$REMOTE_BRANCH" \
                             --base main \
                             --json url \
                             --jq '.[0].url // ""')

            if [ -n "$EXISTING_PR" ]; then
              PR_URL="$EXISTING_PR"
            else
              PR_URL=$(gh pr create \
                         --head "$REMOTE_BRANCH" \
                         --base main \
                         --title "$PR_TITLE" \
                         --body "$PR_BODY")
            fi

            # 4h) Squash-merge & delete the branch
            gh pr merge "$PR_URL" --squash --delete-branch --admin

            # 4i) Short sleep to avoid rate limiting
            sleep 1
          done
