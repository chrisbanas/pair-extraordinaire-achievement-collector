name: Automate Pair Extraordinaire Badge

on:
  workflow_dispatch:

permissions:
  contents: write       # checkout, commit, push
  pull-requests: write  # create & merge PRs

jobs:
  unlock-badge:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout a bare copy of main (no local commits ever land here)
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main

      # 2️⃣ Configure your Git identity (for all ephemeral commits)
      - name: Set up Git user
        run: |
          git config user.name "chrisbanas"
          git config user.email "bananas595@gmail.com"

      # 3️⃣ Install GH CLI and authenticate via PAT
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Authenticate GH CLI
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          unset GH_TOKEN
          echo "$TOKEN" | gh auth login --with-token

      # 4️⃣ Ensure .envexample exists on remote main (create once if needed)
      - name: Ensure .envexample on main
        run: |
          # Fetch the very latest remote main
          git fetch --prune origin main
          # Check out a fresh copy of origin/main into local directory
          git checkout --force origin/main
          # If the file is missing, add it and push straight to main
          if [ ! -f .envexample ]; then
            touch .envexample
            git add .envexample
            git commit -m "chore: add .envexample placeholder"
            git push origin HEAD:main
          fi

      # 5️⃣ Loop 1→48: each iteration creates a new branch off origin/main, commits, PR & squash-merge
      - name: Create & merge 48 co-authored PRs
        env:
          COAUTHOR_NAME: "DongwanXu"                          # Second account’s exact GitHub username
          COAUTHOR_EMAIL: "dongwanxu23@gmail.com"             # Must be a verified email on that GitHub account
        run: |
          for i in $(seq 1 48); do
            # 5a) Grab a fresh, detached copy of origin/main
            git fetch --prune origin main
            git checkout --detach origin/main

            # 5b) Create an ephemeral local branch off that commit
            EPHEMERAL="ephemeral-badge-$i"
            git checkout -b "$EPHEMERAL"

            # 5c) Bump the file
            echo "BADGE_RUN_$i=$(date +%s)" >> .envexample
            git add .envexample

            # 5d) Commit with both co-author trailers
            git commit -m "chore: badge change #$i" \
                       -m "Co-authored-by: ${COAUTHOR_NAME} <${COAUTHOR_EMAIL}>" \
                       -m "Co-authored-by: chrisbanas <bananas595@gmail.com>"

            # 5e) Force-push that ephemeral branch as badge-run-$i
            REMOTE_BRANCH="badge-run-$i"
            git push --force origin HEAD:"$REMOTE_BRANCH"

            # 5f) Build the PR body from the commit message
            PR_BODY=$(git log -1 --pretty=%B)
            PR_TITLE=$(echo "$PR_BODY" | head -n1)

            # 5g) Check if a PR is already open from badge-run-$i → main
            EXISTING_PR=$(gh pr list \
                             --state open \
                             --head "$REMOTE_BRANCH" \
                             --base main \
                             --json url \
                             --jq '.[0].url // ""')

            if [ -n "$EXISTING_PR" ]; then
              PR_URL="$EXISTING_PR"
            else
              PR_URL=$(gh pr create \
                         --head "$REMOTE_BRANCH" \
                         --base main \
                         --title "$PR_TITLE" \
                         --body "$PR_BODY")
            fi

            # 5h) Squash-merge that PR (co-author trailers remain in the final commit)
            gh pr merge "$PR_URL" --squash --delete-branch --admin

            # 5i) Brief pause to avoid rate-limits
            sleep 1
          done
